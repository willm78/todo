{"version":3,"sources":["TodoItem.js","Todo.js","CompleteTodo.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","theme","todoItem","margin","concat","spacing","unit","props","classes","selected","onSelect","onDeselect","children","react_default","a","createElement","ClickAwayListener_default","onClickAway","ListItem_default","onClick","dense","component","Paper","className","Todo","state","isModifying","value","_this","onModify","setState","onChange","e","target","onKeyPress","onUpdate","key","_this2","this","_this$props","idx","onComplete","onDelete","_this$state","curValue","src_TodoItem","ListItemText_default","Input_default","type","placeholder","input","ListItemIcon_default","IconButton_default","Save_default","Delete_default","color","Edit_default","Check_default","Component","onRevert","Fragment","Undo_default","App","curVal","nextId","todos","completed","onAddTodo","_ref","length","Object","objectSpread","defineProperty","_ref2","_ref3","toComplete","objectWithoutProperties","map","_toPropertyKey","_ref4","_ref5","toRevert","rest","Grid_default","container","direction","alignContent","alignItems","justify","item","Paper_default","paper","Button_default","variant","disabled","addButton","Typography_default","buttonText","NoteAdd_default","List_default","keys","src_Todo","CompleteTodo","height","padding","width","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d4b1a830.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nconst styles = theme => ({\r\n    todoItem: {\r\n        margin: `${theme.spacing.unit}px 0`\r\n    }\r\n});\r\n\r\nfunction TodoItem(props) {\r\n    const { classes, selected, onSelect, onDeselect, children } = props;\r\n    return (\r\n        <ClickAwayListener onClickAway={onDeselect}>\r\n            <ListItem\r\n                selected={selected}\r\n                onClick={onSelect}\r\n                dense\r\n                component={Paper}\r\n                className={classes.todoItem}\r\n            >\r\n                {children}\r\n            </ListItem>\r\n        </ClickAwayListener>\r\n    );\r\n}\r\n\r\nexport default withStyles(styles)(TodoItem);\r\n","import React, { Component } from \"react\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Input from \"@material-ui/core/Input\";\r\n\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nconst styles = theme => ({});\r\n\r\nclass Todo extends Component {\r\n    state = {\r\n        isModifying: false,\r\n        value: this.props.value\r\n    };\r\n\r\n    onModify = () => this.setState({ isModifying: true });\r\n\r\n    onChange = e => this.setState({ value: e.target.value });\r\n\r\n    onKeyPress = e => {\r\n        const { onUpdate } = this.props;\r\n        const { value } = this.state;\r\n        return e.key === \"Enter\" ? onUpdate(value) : null;\r\n    };\r\n\r\n    onDeselect = () => {\r\n        const { onDeselect } = this.props;\r\n        this.setState({\r\n            isModifying: false,\r\n            value: this.props.value\r\n        });\r\n        onDeselect();\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            classes,\r\n            idx,\r\n            selected,\r\n            onSelect,\r\n            onUpdate,\r\n            onComplete,\r\n            onDelete,\r\n            value\r\n        } = this.props;\r\n        const { isModifying, value: curValue } = this.state;\r\n        return isModifying ? (\r\n            <TodoItem\r\n                selected={selected}\r\n                onSelect={onSelect}\r\n                onDeselect={this.onDeselect}\r\n            >\r\n                <ListItemText>\r\n                    {`${idx + 1}. `}\r\n                    <Input\r\n                        type=\"text\"\r\n                        placeholder={value}\r\n                        onChange={this.onChange}\r\n                        onKeyPress={this.onKeyPress}\r\n                        value={curValue}\r\n                        className={classes.input}\r\n                    />\r\n                </ListItemText>\r\n                <ListItemIcon>\r\n                    <IconButton\r\n                        onClick={() => {\r\n                            this.setState({ isModifying: false });\r\n                            onUpdate(curValue);\r\n                        }}\r\n                    >\r\n                        <SaveIcon />\r\n                    </IconButton>\r\n                </ListItemIcon>\r\n                <ListItemIcon>\r\n                    <IconButton onClick={onDelete}>\r\n                        <DeleteIcon color=\"error\" />\r\n                    </IconButton>\r\n                </ListItemIcon>\r\n            </TodoItem>\r\n        ) : (\r\n            <TodoItem\r\n                selected={selected}\r\n                onSelect={onSelect}\r\n                onDeselect={this.onDeselect}\r\n            >\r\n                <ListItemText>{`${idx + 1}. ${value}`}</ListItemText>\r\n                <ListItemIcon>\r\n                    <IconButton onClick={this.onModify}>\r\n                        <EditIcon />\r\n                    </IconButton>\r\n                </ListItemIcon>\r\n                <ListItemIcon>\r\n                    <IconButton onClick={onComplete}>\r\n                        <CheckIcon color=\"action\" />\r\n                    </IconButton>\r\n                </ListItemIcon>\r\n            </TodoItem>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Todo);\r\n","import React, { Component } from \"react\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport UndoIcon from \"@material-ui/icons/Undo\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nconst styles = theme => ({});\r\n\r\nclass Todo extends Component {\r\n    render() {\r\n        const {\r\n            classes,\r\n            idx,\r\n            selected,\r\n            onSelect,\r\n            onDeselect,\r\n            onRevert,\r\n            value\r\n        } = this.props;\r\n        return (\r\n            <TodoItem\r\n                selected={selected}\r\n                onSelect={onSelect}\r\n                onDeselect={onDeselect}\r\n            >\r\n                <ListItemText>{`${idx + 1}. ${value}`}</ListItemText>\r\n                <React.Fragment>\r\n                    <ListItemIcon>\r\n                        <IconButton onClick={onRevert}>\r\n                            <UndoIcon />\r\n                        </IconButton>\r\n                    </ListItemIcon>\r\n                </React.Fragment>\r\n            </TodoItem>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Todo);\r\n","import React, { Component } from \"react\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport NoteAddIcon from \"@material-ui/icons/NoteAdd\";\r\nimport List from \"@material-ui/core/List\";\r\n\r\nimport Todo from \"./Todo\";\r\nimport CompleteTodo from \"./CompleteTodo\";\r\n\r\nconst styles = theme => ({\r\n    container: {\r\n        height: \"100vh\"\r\n    },\r\n    paper: {\r\n        padding: theme.spacing.unit * 4,\r\n        width: \"50vw\",\r\n        maxWidth: \"700px\",\r\n        height: \"90vh\"\r\n    },\r\n    input: {\r\n        width: \"75%\"\r\n    },\r\n    addButton: {\r\n        padding: theme.spacing.unit,\r\n        margin: theme.spacing.unit\r\n    },\r\n    buttonText: {\r\n        margin: `0 ${theme.spacing.unit}px`\r\n    }\r\n});\r\n\r\nclass App extends Component {\r\n    state = {\r\n        curVal: \"\",\r\n        nextId: 0,\r\n        selected: null,\r\n        todos: {},\r\n        completed: {}\r\n    };\r\n\r\n    onKeyPress = e => {\r\n        return e.key === \"Enter\" ? this.onAddTodo() : null;\r\n    };\r\n\r\n    onChange = e => {\r\n        return e.key === \"Enter\"\r\n            ? null\r\n            : this.setState({ curVal: e.target.value });\r\n    };\r\n\r\n    onAddTodo = () =>\r\n        this.setState(({ curVal, nextId, todos }) => {\r\n            return curVal.length\r\n                ? {\r\n                      curVal: \"\",\r\n                      nextId: nextId + 1,\r\n                      todos: { ...todos, [nextId]: curVal }\r\n                  }\r\n                : null;\r\n        });\r\n\r\n    onSelect = key => () => this.setState({ selected: key });\r\n\r\n    onDeselect = () => this.setState({ selected: null });\r\n\r\n    onUpdate = key => value => {\r\n        this.setState(({ todos }) => ({\r\n            todos: { ...todos, [key]: value },\r\n            selected: null\r\n        }));\r\n    };\r\n\r\n    onComplete = key => () => {\r\n        this.setState(({ todos, completed }) => {\r\n            const { [key]: toComplete, ...rest } = todos;\r\n            return {\r\n                todos: rest,\r\n                completed: { ...completed, [key]: toComplete }\r\n            };\r\n        });\r\n    };\r\n\r\n    onDelete = key => () => {\r\n        this.setState(({ todos }) => {\r\n            const { [key]: toDelete, ...rest } = todos;\r\n            return {\r\n                todos: rest\r\n            };\r\n        });\r\n    };\r\n\r\n    onRevert = key => () => {\r\n        this.setState(({ todos, completed }) => {\r\n            const { [key]: toRevert, ...rest } = completed;\r\n            return {\r\n                todos: { ...todos, [key]: toRevert },\r\n                completed: rest\r\n            };\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        const { curVal, selected, todos, completed } = this.state;\r\n        return (\r\n            <Grid\r\n                container\r\n                direction=\"column\"\r\n                alignContent=\"center\"\r\n                alignItems=\"center\"\r\n                justify=\"center\"\r\n                className={classes.container}\r\n            >\r\n                <Grid item>\r\n                    <Paper className={classes.paper}>\r\n                        <Input\r\n                            type=\"text\"\r\n                            placeholder=\"...new todo\"\r\n                            onChange={this.onChange}\r\n                            onKeyPress={this.onKeyPress}\r\n                            value={curVal}\r\n                            className={classes.input}\r\n                        />\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            disabled={!curVal}\r\n                            onClick={this.onAddTodo}\r\n                            className={classes.addButton}\r\n                        >\r\n                            <Typography\r\n                                className={classes.buttonText}\r\n                                color=\"inherit\"\r\n                            >\r\n                                Add\r\n                            </Typography>\r\n                            <NoteAddIcon />\r\n                        </Button>\r\n                        <Typography variant=\"h5\">Current</Typography>\r\n\r\n                        <List>\r\n                            {Object.keys(todos).map((key, idx) => (\r\n                                <Todo\r\n                                    key={key}\r\n                                    idx={idx}\r\n                                    selected={selected === key}\r\n                                    onSelect={this.onSelect(key)}\r\n                                    onDeselect={this.onDeselect}\r\n                                    onUpdate={this.onUpdate(key)}\r\n                                    onComplete={this.onComplete(key)}\r\n                                    onDelete={this.onDelete(key)}\r\n                                    value={todos[key]}\r\n                                />\r\n                            ))}\r\n                        </List>\r\n                        <Typography variant=\"h5\">Completed</Typography>\r\n                        <List>\r\n                            {Object.keys(completed).map((key, idx) => (\r\n                                <CompleteTodo\r\n                                    key={key}\r\n                                    idx={idx}\r\n                                    selected={selected === key}\r\n                                    onSelect={this.onSelect(key)}\r\n                                    onDeselect={this.onDeselect}\r\n                                    onRevert={this.onRevert(key)}\r\n                                    value={completed[key]}\r\n                                />\r\n                            ))}\r\n                        </List>\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}